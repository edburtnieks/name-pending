---
import i18next, { t } from "i18next";
import { LANGUAGE_MAP } from "@constants/languages";
import { localizePath } from "@utils/localize-path";

export interface Props {
    language?: string;
};

const pathnameParts = new URL(Astro.request.url).pathname.split("/");
pathnameParts.splice(0, 2);
const url = pathnameParts.length ? `/${pathnameParts.join("/")}` : "";

const { language } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang={ language ?? "en" }>

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Name pending</title>
</head>

<body>
    <header class="container">
        <nav>
            <menu class="flow">
                <a href={localizePath("/")} data-state={localizePath("/") === `/${language}${url}` ? "active" : undefined}>
                    <span>{t("global.home")}</span>
                </a>
                <a href={localizePath("/locations")} data-state={localizePath("/locations") === `/${language}${url}` ? "active" : undefined}>
                    <span>{t("global.locations")}</span>
                </a>
            </menu>
        </nav>
        <menu class="flow">
            {[...i18next.languages].sort().map((language) => (
            <a href={`/${language}${url}`} data-state={i18next.language === language ? "active" : undefined}>
                <span>{LANGUAGE_MAP[language]}</span>
            </a>
            ))}
        </menu>
    </header>
    <slot />
</body>

</html>

<style lang="scss">
    header {
        display: flex;
        align-items: baseline;
        justify-content: space-between;
        gap: 2rem;
    }

    a {
        color: inherit;
        text-decoration: none;
        display: inline-block;
        padding-block: 1rem;
        outline: 0;

        span {
            border-radius: 2px;
            outline-offset: 4px;
        }

        &[data-state="active"] {
            font-weight: 700;
        }

        &:hover {
            text-decoration: underline;
        }

        &:focus-visible {
            span {
                outline: 2px solid hsl(0 0% 13%);
            }
        }
    }
</style>

<style lang="scss" is:global>
    *,
    *::before,
    *::after {
        box-sizing: border-box;
    }

    * {
        margin: 0;
        padding: 0;
    }

    body {
        font-family: sans-serif;
        line-height: 1.5;
        background-color: hsl(0 0% 97%);
        color: hsl(0 0% 13%);
    }

    h1,
    h2,
    h3 {
        line-height: 1.1;
    }

    ul,
    menu {
        list-style-type: none;
    }

    .container {
        max-inline-size: 80rem;
        margin-inline: auto;
    }

    .flow {
        >*+* {
            margin-inline-start: 1rem;
        }
    }
</style>
